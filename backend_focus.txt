# Alioth Backend MVP Implementation Focus
## Target: NestJS Backend as AI-Contract Orchestrator for Chainlink Hackathon Demo

### üéØ **Core Responsibility**
The backend acts as a **smart orchestrator** that coordinates between AI agent swap execution and on-chain Chainlink-validated protocol deposits, WITHOUT performing critical financial logic that bypasses on-chain validation.

## üìã **Required API Endpoints for MVP Demo**

### **1. POST /api/v1/ai-optimization/optimize-deposit**
```typescript
// Location: src/modules/ai-optimization/controllers/ai-optimization.controller.ts
@Post('optimize-deposit')
async optimizeDeposit(@Body() request: OptimizeDepositDto) {
  // 1. Validate user input
  // 2. Call AI Agent for analysis + swap execution
  // 3. Receive ready-to-deposit tokens from AI
  // 4. Call smart contract with ready-to-deposit allocation
  // 5. Return transaction hash and final strategy
}

interface OptimizeDepositDto {
  userAddress: string;
  inputTokenAddress: string; // "0xA0b86a33E6FC17036E8b9d2C33F67Df04D6DAB07" (USDC)
  inputTokenSymbol: string;  // "USDC" 
  inputAmount: string;       // "1000000000" (1000 USDC in wei)
  riskTolerance: 'conservative' | 'moderate' | 'aggressive';
  minYieldThreshold?: number;
}

interface OptimizationResponse {
  success: boolean;
  transactionHash: string;
  swapsExecuted: SwapResult[];        // AI swap execution details
  finalAllocation: ProtocolAllocation[]; // Ready-to-deposit strategy
  totalExpectedAPY: number;
  reasoning: string;
  trackingId: string;
}
```

### **2. WebSocket Integration for Real-time Updates**
```typescript
// Location: src/modules/ai-optimization/gateways/optimization.gateway.ts
@WebSocketGateway(3001, { cors: true })
export class OptimizationGateway {
  // Real-time updates for:
  // - AI swap execution progress
  // - Contract deposit execution status
  // - Chainlink automation triggers
  // - Portfolio performance updates
  // - Rebalancing events
}
```

## ü§ñ **Enhanced AI Agent Integration Service**

### **Required: AgentCommunicationService**
```typescript
// Location: src/modules/ai-optimization/services/agent-communication.service.ts
@Injectable()
export class AgentCommunicationService {
  async requestSwapAndOptimization(params: SwapOptimizationRequest): Promise<SwapOptimizationResponse> {
    // Call ElizaOS agent for complete swap + optimization
    // AI agent handles: market analysis + swap execution + final allocation
    // Returns: ready-to-deposit tokens with protocol allocations
  }

  async pingAIAgent(): Promise<boolean> {
    // Health check for AI agent availability
    // Verify wallet balance and DEX connectivity
  }
}

interface SwapOptimizationRequest {
  inputTokenAddress: string;  // "0xA0b86a33E6FC17036E8b9d2C33F67Df04D6DAB07"
  usdAmount: number;          // 1000 (USD value)
  riskTolerance: 'conservative' | 'moderate' | 'aggressive';
  userAddress?: string;       // For personalized analysis
}

interface SwapOptimizationResponse {
  swapsExecuted: SwapResult[];
  finalAllocation: {
    protocol: 'aave' | 'compound' | 'yearn';
    token: string;            // Ready-to-deposit token address
    amount: string;           // Ready-to-deposit amount (post-swap)
    expectedAPY: number;
    riskScore: number;
  }[];
  totalExpectedAPY: number;
  confidence: number;
  reasoning: string;
  timestamp: string;
}

interface SwapResult {
  fromToken: string;          // "USDC"
  toToken: string;           // "WETH"
  inputAmount: string;       // "600000000"
  actualOutput: string;      // "0.3 WETH"
  executedPrice: number;     // Actual swap rate
  slippage: number;         // Actual slippage
  gasUsed: number;          // Gas cost
  swapHash: string;         // Transaction hash
}
```

## üîó **Enhanced Smart Contract Integration Service**

### **Required: Web3ContractService Enhancement**
```typescript
// Location: src/modules/ai-optimization/services/web3-contract.service.ts
@Injectable()
export class Web3ContractService {
  async executeOptimizedDeposits(strategy: FinalAllocationStrategy): Promise<TransactionResult> {
    // 1. Prepare contract call data for executeOptimizedDeposits()
    // 2. Convert AI allocation to contract parameters
    // 3. Estimate gas costs for multi-protocol deposits
    // 4. Call EnhancedYieldOptimizer.executeOptimizedDeposits()
    // 5. Monitor transaction status and events
    // 6. Emit WebSocket updates for real-time tracking
    // 7. Store execution log with swap and deposit details
  }

  async listenToChainlinkEvents(): Promise<void> {
    // Listen for enhanced events:
    // - OptimizationExecuted (with swap details)
    // - ProtocolDepositExecuted events
    // - AutomationRegistered events
    // - AutomatedRebalanceExecuted events
    // - AIAgentAuthorized/Revoked events
  }

  private formatContractAllocation(aiAllocation: AIAllocation[]): ContractAllocation[] {
    return aiAllocation.map(alloc => ({
      protocol: this.mapProtocolToEnum(alloc.protocol),
      token: alloc.token,
      amount: BigInt(alloc.amount),
      minExpectedAPY: parseUnits(alloc.expectedAPY.toString(), 4),
      maxSlippage: parseUnits('0.5', 4) // 0.5% default
    }));
  }
}
```

## üìä **Enhanced Market Data Service**

### **Required: TokenService for USD Conversion**
```typescript
// Location: src/modules/market-analysis/services/token.service.ts
@Injectable()
export class TokenService {
  async getUSDValue(tokenSymbol: string, tokenAmount: string): Promise<number> {
    // Convert token amount to USD for AI analysis
    // Use Chainlink price feeds or CoinGecko API
    // Example: 1000 USDC ‚Üí 1000 USD
    // Example: 0.5 WETH ‚Üí 1200 USD (if ETH = $2400)
  }

  async getTokenDecimals(tokenAddress: string): Promise<number> {
    // Get token decimals for proper amount conversion
  }

  async validateTokenAddress(tokenAddress: string): Promise<boolean> {
    // Validate token address is supported
  }
}
```

### **Required: ChainlinkDataService for Validation**
```typescript
// Location: src/modules/market-analysis/services/chainlink-data.service.ts
@Injectable()
export class ChainlinkDataService {
  async validateAISwapResults(swapResults: SwapResult[]): Promise<ValidationResult> {
    // Validate AI swap results against Chainlink price feeds
    // Ensure no price manipulation or excessive slippage
    // For audit trail and security validation
  }

  async getProtocolYields(): Promise<ProtocolYields> {
    // Get current protocol yields for comparison
    // Validate AI expectations against actual rates
  }
}
```

## üèóÔ∏è **Enhanced Database Schema Requirements**

### **1. Enhanced Optimization Executions Collection**
```typescript
// Location: src/shared/database/schemas/optimization-execution.schema.ts
@Schema({ timestamps: true })
export class OptimizationExecution {
  @Prop({ required: true })
  userAddress: string;

  @Prop({ required: true })
  inputTokenAddress: string;

  @Prop({ required: true })
  inputTokenSymbol: string;

  @Prop({ required: true })
  inputAmount: string;

  @Prop({ required: true })
  swapsExecuted: SwapResult[];           // AI swap execution details

  @Prop({ required: true })
  finalAllocation: ProtocolAllocation[]; // Ready-to-deposit strategy

  @Prop({ required: true })
  contractTransactionHash: string;       // Smart contract execution

  @Prop({ required: true })
  status: 'ai_processing' | 'swaps_executed' | 'contract_pending' | 'executed' | 'failed';

  @Prop()
  chainlinkAutomationId?: string;

  @Prop()
  aiRecommendation: SwapOptimizationResponse;

  @Prop()
  actualPerformance?: PerformanceMetrics;

  @Prop()
  totalGasUsed?: number;                 // Combined gas from swaps + deposits

  @Prop()
  totalExpectedAPY?: number;
}
```

### **2. AI Swap Tracking Collection**
```typescript
// Location: src/shared/database/schemas/ai-swap.schema.ts
@Schema({ timestamps: true })
export class AISwapExecution {
  @Prop({ required: true })
  optimizationId: string;

  @Prop({ required: true })
  fromToken: string;

  @Prop({ required: true })
  toToken: string;

  @Prop({ required: true })
  inputAmount: string;

  @Prop({ required: true })
  outputAmount: string;

  @Prop({ required: true })
  executedPrice: number;

  @Prop({ required: true })
  slippage: number;

  @Prop({ required: true })
  gasUsed: number;

  @Prop({ required: true })
  swapHash: string;

  @Prop({ required: true })
  dexUsed: string;                      // "1inch", "paraswap", "uniswap"

  @Prop({ required: true })
  status: 'pending' | 'executed' | 'failed';
}
```

## üîß **Enhanced Environment Configuration**

### **Required Environment Variables**
```bash
# Smart Contract Configuration
ENHANCED_YIELD_OPTIMIZER_ADDRESS=0x...
CHAINLINK_FEED_MANAGER_ADDRESS=0x...
AUTHORIZED_AI_AGENT_ADDRESS=0x...

# AI Agent Configuration
AI_AGENT_ENDPOINT=http://localhost:3002
AI_AGENT_API_KEY=...
AI_AGENT_HEALTH_CHECK_INTERVAL=30000  # 30 seconds

# Blockchain Configuration (Sepolia Focus)
WEB3_RPC_URL=https://sepolia.infura.io/v3/...
PRIVATE_KEY=... # For contract interaction (backend wallet)
CHAIN_ID=11155111 # Sepolia testnet

# Token Configuration (Sepolia)
USDC_ADDRESS=0xA0b86a33E6FC17036E8b9d2C33F67Df04D6DAB07
WETH_ADDRESS=0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14
DAI_ADDRESS=0x6B175474E89094C44Da98b954EedeAC495271d0F

# Chainlink Configuration
CHAINLINK_VRF_SUBSCRIPTION_ID=...
CHAINLINK_AUTOMATION_REGISTRY=0x...
```

## üö¶ **Implementation Priority Order**

### **Phase 1: AI-Contract Orchestration** (MVP Essential)
1. ‚úÖ Enhanced OptimizeDepositDto with token addresses
2. ‚úÖ AgentCommunicationService with swap request handling
3. ‚úÖ Web3ContractService with executeOptimizedDeposits() call
4. ‚úÖ TokenService for USD conversion and validation
5. ‚úÖ Enhanced database schemas for swap tracking

### **Phase 2: Real-time Monitoring** (Demo Enhancement)
1. ‚úÖ WebSocket gateway with swap progress updates
2. ‚úÖ Enhanced Chainlink event listeners
3. ‚úÖ AI swap result validation
4. ‚úÖ Performance tracking with gas optimization

### **Phase 3: Production Features** (Post-MVP)
1. ‚è≥ Comprehensive error recovery for failed swaps
2. ‚è≥ Advanced caching for AI responses
3. ‚è≥ Multi-chain support expansion
4. ‚è≥ Advanced monitoring and alerting

## üß™ **Enhanced Testing Requirements**

### **Critical Test Cases**
```typescript
// Location: src/modules/ai-optimization/ai-optimization.controller.spec.ts
describe('Enhanced AI Optimization Controller', () => {
  it('should orchestrate full AI swap + contract deposit flow', async () => {
    // 1. Mock AI agent swap execution response
    // 2. Mock smart contract executeOptimizedDeposits call
    // 3. Verify orchestration logic handles ready-to-deposit tokens
    // 4. Assert no financial logic bypasses on-chain validation
  });

  it('should handle AI swap failures gracefully', async () => {
    // Test fallback when AI agent swaps fail
    // Verify user funds are not lost
  });

  it('should validate AI swap results against Chainlink feeds', async () => {
    // Ensure swap results are reasonable
    // Detect potential manipulation
  });

  it('should track gas usage across AI swaps and contract deposits', async () => {
    // Monitor total gas costs for user transparency
  });
});
```

## üìã **Success Criteria for MVP Demo**

### **Must Work Flawlessly:**
1. ‚úÖ User deposits 1000 USDC ‚Üí Backend receives request
2. ‚úÖ Backend calls AI agent ‚Üí AI executes swaps (600 USDC ‚Üí WETH, keeps 400 USDC)
3. ‚úÖ AI returns ready-to-deposit allocation ‚Üí Backend receives structured response
4. ‚úÖ Backend calls smart contract ‚Üí Deposits 0.3 WETH to Aave, 400 USDC to Compound
5. ‚úÖ Contract validates via Chainlink ‚Üí All deposits execute successfully
6. ‚úÖ Backend tracks all events ‚Üí Updates user via WebSocket
7. ‚úÖ Chainlink automation triggers ‚Üí Backend monitors rebalancing

### **Demo Flow Integration:**
```typescript
// Enhanced demo endpoint for full flow testing
@Get('demo/status/:trackingId')
async getDemoStatus(@Param('trackingId') trackingId: string) {
  return {
    stage: 'ai_swaps_executed' | 'contract_deposits_pending' | 'optimization_executed' | 'automation_registered' | 'rebalance_triggered',
    aiSwapResults: SwapResult[],
    contractDeposits: ProtocolAllocation[],
    chainlinkEvents: ChainlinkEvent[],
    currentPerformance: PerformanceMetrics,
    totalGasUsed: number,
    nextRebalanceEstimate: Date
  };
}

@Post('demo/simulate-full-flow')
async simulateFullFlow(@Body() request: DemoFlowRequest) {
  // Simulate complete flow for testing:
  // 1. AI agent swap execution
  // 2. Contract deposit execution  
  // 3. Chainlink automation setup
  // 4. Performance tracking
}
```

## üéØ **Key Implementation Notes**

1. **AI-First Architecture** - AI agent handles all swap complexity
2. **Pure Orchestration** - Backend coordinates but doesn't execute financial operations
3. **Chainlink Validation** - All final validations happen on-chain via Chainlink
4. **Event-Driven Updates** - Track both AI swaps and contract deposits
5. **Gas Transparency** - Monitor total gas costs across AI + contract operations
6. **Comprehensive Logging** - Track every step from AI request to final deposit
7. **Error Recovery** - Handle failures at AI swap or contract deposit stages

## üìä **Enhanced Success Metrics**

### **Integration Metrics:**
- ‚úÖ AI-Backend communication: <2 seconds response time
- ‚úÖ Swap execution success rate: >95%
- ‚úÖ Contract deposit success rate: >99%
- ‚úÖ End-to-end flow completion: <30 seconds
- ‚úÖ Gas cost predictability: ¬±10% of estimates

### **User Experience Metrics:**
- ‚úÖ Real-time progress updates via WebSocket
- ‚úÖ Clear error messages for failed operations
- ‚úÖ Transparent gas cost breakdown
- ‚úÖ Performance tracking and reporting

**The backend now serves as the intelligent orchestrator that coordinates AI agent swap execution with Chainlink-validated smart contract deposits, providing a seamless bridge between off-chain optimization and on-chain security.** 