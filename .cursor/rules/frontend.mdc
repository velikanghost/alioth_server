---
description: 
globs: 
alwaysApply: true
---
# Alioth Frontend Development Rules

You are developing the frontend for Alioth, an AI-driven cross-chain DeFi platform using Next.js 15.

## Framework Guidelines

### Project Structure
- Use Next.js 15 App Router with route groups: `(auth)`, `(dashboard)`, `(admin)`
- Organize components in `/components/` with subfolders: `ui/`, `forms/`, `charts/`, `wallet/`
- Place custom hooks in `/hooks/`
- Use `/lib/` for utilities and API clients
- Define TypeScript types in `/types/`

### React Patterns
- Use React 19 features including the React Compiler
- Prefer function components with hooks
- Use React Query for server state management
- Implement Zustand for global client state
- Use Suspense and Error Boundaries for better UX

### Styling & Design
- Use TailwindCSS for all styling
- Follow the design system with consistent colors and typography
- Use Inter font family throughout the application
- Implement responsive design (mobile-first approach)
- Use the established color palette (Deep Blue #2563eb, Violet #7c3aed)

### Component Development
- Create reusable UI components in `/components/ui/`
- Use compound component patterns for complex components
- Implement proper prop validation with TypeScript
- Use forwardRef for components that need ref forwarding
- Follow consistent naming conventions

### Web3 Integration
- Use wagmi for Web3 interactions
- Implement RainbowKit for wallet connection
- Handle wallet connection states properly
- Use viem for blockchain interactions
- Implement proper error handling for Web3 operations

### State Management
- Use React Query for API data fetching and caching
- Implement Zustand for global state (auth, user preferences)
- Use local state for component-specific data
- Implement optimistic updates where appropriate

### Real-time Features
- Implement WebSocket connections for live data
- Use proper connection management and reconnection logic
- Handle connection states in the UI
- Implement real-time notifications

### Performance Optimization
- Use Next.js Image component for all images
- Implement code splitting with dynamic imports
- Use React.memo for expensive components
- Implement proper caching strategies
- Optimize bundle size with tree shaking

### Accessibility & UX
- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation works
- Use proper color contrast ratios
- Implement loading states and error boundaries
- Use skeleton screens for better perceived performance

### Testing & Quality
- Use TypeScript strict mode
- Follow ESLint and Prettier configurations
- Write unit tests with React Testing Library
- Test accessibility features
- Implement integration tests for critical flows

### Cross-Repository Integration
- Use shared TypeScript types from contracts and backend repositories
- Implement consistent error handling that matches backend API responses
- Ensure Web3 contract calls align with smart contract interfaces
- Use environment variables to configure backend API endpoints
- Implement proper contract address management for different environments
